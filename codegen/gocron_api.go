// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for CronStatusEnable.
const (
	Enable CronStatusEnable = "enable"
	Unable CronStatusEnable = "unable"
)

// Defines values for NotificationType.
const (
	Feishu   NotificationType = "feishu"
	Telegram NotificationType = "telegram"
)

// Cron defines model for Cron.
type Cron struct {
	Command string `json:"command"`
	Id      *int   `json:"id,omitempty"`
	Name    string `json:"name"`
	Notify  int    `json:"notify"`
	Time    string `json:"time"`
}

// Cron1 defines model for Cron1.
type Cron1 struct {
	Command string `json:"command"`
	Name    string `json:"name"`
	Notify  int    `json:"notify"`
	Time    string `json:"time"`
}

// CronStatus defines model for CronStatus.
type CronStatus struct {
	Enable CronStatusEnable `json:"enable"`
}

// CronStatusEnable defines model for CronStatus.Enable.
type CronStatusEnable string

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Log defines model for Log.
type Log struct {
	CronId string  `json:"cron_id"`
	Id     *int    `json:"id,omitempty"`
	Log    string  `json:"log"`
	Name   string  `json:"name"`
	Time   *string `json:"time,omitempty"`
}

// Notification defines model for Notification.
type Notification struct {
	Content *string           `json:"content,omitempty"`
	Id      *int              `json:"id,omitempty"`
	Name    *string           `json:"name,omitempty"`
	Title   *string           `json:"title,omitempty"`
	Type    *NotificationType `json:"type,omitempty"`
	Url     *string           `json:"url,omitempty"`
}

// NotificationType defines model for Notification.Type.
type NotificationType string

// OK defines model for OK.
type OK struct {
	Message *string `json:"message,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// GetCronJobsOK defines model for GetCronJobsOK.
type GetCronJobsOK struct {
	Data    *[]Cron `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GetLogByIdOK defines model for GetLogByIdOK.
type GetLogByIdOK struct {
	Data *[]Log `json:"data,omitempty"`
}

// GetNotificationsOK defines model for GetNotificationsOK.
type GetNotificationsOK struct {
	Data *[]Notification `json:"data,omitempty"`
}

// OKRequest defines model for OKRequest.
type OKRequest = OK

// CreateCronJobJSONRequestBody defines body for CreateCronJob for application/json ContentType.
type CreateCronJobJSONRequestBody = Cron1

// UpdateCronJobStatusJSONRequestBody defines body for UpdateCronJobStatus for application/json ContentType.
type UpdateCronJobStatusJSONRequestBody = CronStatus

// CreateNotificationJSONRequestBody defines body for CreateNotification for application/json ContentType.
type CreateNotificationJSONRequestBody = Notification

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all cron jobs
	// (GET /cron)
	GetCronJobs(ctx echo.Context) error
	// Create a cron job
	// (POST /cron)
	CreateCronJob(ctx echo.Context) error
	// Delete a cron job
	// (DELETE /cron/{id})
	DeleteCronJob(ctx echo.Context, id int) error
	// Update cron job status
	// (PUT /cron/{id}/status)
	UpdateCronJobStatus(ctx echo.Context, id int) error
	// Get log by id
	// (GET /log/{id})
	GetLogById(ctx echo.Context, id int64) error
	// Get all notifications
	// (GET /notify)
	GetNotifications(ctx echo.Context) error
	// Create a notification
	// (POST /notify)
	CreateNotification(ctx echo.Context) error
	// Delete a notification
	// (DELETE /notify/{id})
	DeleteNotification(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCronJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetCronJobs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCronJobs(ctx)
	return err
}

// CreateCronJob converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCronJob(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCronJob(ctx)
	return err
}

// DeleteCronJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCronJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCronJob(ctx, id)
	return err
}

// UpdateCronJobStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCronJobStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCronJobStatus(ctx, id)
	return err
}

// GetLogById converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLogById(ctx, id)
	return err
}

// GetNotifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetNotifications(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNotifications(ctx)
	return err
}

// CreateNotification converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNotification(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateNotification(ctx)
	return err
}

// DeleteNotification converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNotification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteNotification(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/cron", wrapper.GetCronJobs)
	router.POST(baseURL+"/cron", wrapper.CreateCronJob)
	router.DELETE(baseURL+"/cron/:id", wrapper.DeleteCronJob)
	router.PUT(baseURL+"/cron/:id/status", wrapper.UpdateCronJobStatus)
	router.GET(baseURL+"/log/:id", wrapper.GetLogById)
	router.GET(baseURL+"/notify", wrapper.GetNotifications)
	router.POST(baseURL+"/notify", wrapper.CreateNotification)
	router.DELETE(baseURL+"/notify/:id", wrapper.DeleteNotification)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
